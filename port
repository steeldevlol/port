#!/bin/bash

# Constants
DB_FILE="/tmp/port_tunnels.db"
SERVER="124.6.63.23"
USER="tunnel"

# Functions

# Check if a port is valid
is_valid_port() {
  local port=$1
  if ! [[ "$port" =~ ^[0-9]+$ ]]; then
    return 1 # Not a number
  fi
  if (( port < 1 || port > 65535 )); then
    return 1 # Out of range
  fi
  return 0
}

add_tunnel() {
  local LOCAL_PORT=$1

  # Validate port
  if ! is_valid_port "$LOCAL_PORT"; then
    echo "‚ùå Invalid port number: $LOCAL_PORT. Must be between 1 and 65535."
    return 1
  fi

  local TMPFILE=$(mktemp)
  if [[ -z "$TMPFILE" ]]; then
    echo "‚ùå Failed to create temporary file."
    return 1
  fi

  # Construct the ssh command
  local SSH_COMMAND="ssh -N -R 0:localhost:$LOCAL_PORT $USER@$SERVER"

  # Execute the ssh command and capture the PID
  $SSH_COMMAND >"$TMPFILE" 2>&1 &
  local SSH_PID=$!

  # Check if the PID is valid
  if [[ -z "$SSH_PID" ]]; then
    echo "‚ùå Failed to start ssh process."
    rm -f "$TMPFILE"
    return 1
  fi

  sleep 1

  # Check if the tunnel was successfully established
  if grep -q "Allocated port" "$TMPFILE"; then
    local REMOTE_PORT=$(grep "Allocated port" "$TMPFILE" | grep -oP '\d{4,5}')

    # Check if the remote port was extracted successfully
    if [[ -z "$REMOTE_PORT" ]]; then
      echo "‚ùå Failed to extract remote port from ssh output."
      kill "$SSH_PID" 2>/dev/null
      rm -f "$TMPFILE"
      return 1
    fi

    # Store the tunnel information in the database file
    echo "$LOCAL_PORT:$REMOTE_PORT:$SSH_PID" >> "$DB_FILE"

    # Check if the write operation was successful
    if [[ $? -ne 0 ]]; then
      echo "‚ùå Failed to write tunnel information to database file."
      kill "$SSH_PID" 2>/dev/null
      rm -f "$TMPFILE"
      return 1
    fi

    echo "‚úÖ Port $LOCAL_PORT forwarded to $SERVER:$REMOTE_PORT"
  else
    echo "‚ùå Tunnel failed. Output:"
    cat "$TMPFILE"
    kill "$SSH_PID" 2>/dev/null

    # Check if the kill operation was successful
    if [[ $? -ne 0 ]]; then
      echo "‚ùå Failed to kill ssh process with PID $SSH_PID."
    fi
  fi

  # Clean up the temporary file
  rm -f "$TMPFILE"

  return 0
}

stop_tunnel() {
  local PORT=$1

  # Validate port
  if ! is_valid_port "$PORT"; then
    echo "‚ùå Invalid port number: $PORT. Must be between 1 and 65535."
    return 1
  fi

  local TMP=$(mktemp)
  if [[ -z "$TMP" ]]; then
    echo "‚ùå Failed to create temporary file."
    return 1
  fi

  local tunnel_found=0
  while IFS=: read -r LPORT RPORT PID; do
    if [[ "$LPORT" == "$PORT" ]]; then
      kill "$PID" 2>/dev/null
      if [[ $? -eq 0 ]]; then
        echo "üõë Stopped tunnel for port $LPORT"
        tunnel_found=1
      else
        echo "‚ùå Failed to kill process with PID $PID."
        echo "$LPORT:$RPORT:$PID" >> "$TMP"
      fi
    else
      echo "$LPORT:$RPORT:$PID" >> "$TMP"
    fi
  done < "$DB_FILE"

  if [[ "$tunnel_found" -eq 0 ]]; then
    echo "‚ÑπÔ∏è  No tunnel found for port $PORT."
    rm -f "$TMP"
    return 1
  fi

  mv "$TMP" "$DB_FILE"
  return 0
}

stop_all() {
  local tunnel_found=0
  while IFS=: read -r LPORT RPORT PID; do
    kill "$PID" 2>/dev/null
    if [[ $? -eq 0 ]]; then
      echo "üõë Stopped tunnel for port $LPORT"
      tunnel_found=1
    else
      echo "‚ùå Failed to kill process with PID $PID."
    fi
  done < "$DB_FILE"

  # Truncate the database file
  > "$DB_FILE"

  if [[ "$tunnel_found" -eq 0 ]]; then
    echo "‚ÑπÔ∏è  No tunnels to stop."
    return 1
  fi
  return 0
}

list_tunnels() {
  if [[ ! -s "$DB_FILE" ]]; then
    echo "‚ÑπÔ∏è  No tunnels running."
    return
  fi

  echo "Current active tunnels:"
  local tunnel_found=0
  while IFS=: read -r LPORT RPORT PID; do
    if ps -p "$PID" > /dev/null 2>&1; then
      echo " - $SERVER:$RPORT ‚ûú localhost:$LPORT (pid $PID)"
      tunnel_found=1
    else
      echo "‚ùå Tunnel for port $LPORT (pid $PID) not running, removing from list."
      stop_tunnel "$LPORT"
    fi
  done < "$DB_FILE"

  if [[ "$tunnel_found" -eq 0 ]]; then
    echo "‚ÑπÔ∏è  No active tunnels found."
  fi
}

print_help() {
  echo "Usage: ./port {add|stop|list|help} [options]"
  echo
  echo "  add   <port>          Add tunnel for local port"
  echo "  stop  <port|all>      Stop a specific tunnel or all tunnels"
  echo "  list  tunnels         List active tunnels"
  echo "  help                  Show this help message"
  echo
  echo "Examples:"
  echo "  ./port add 8080"
  echo "  ./port stop 8080"
  echo "  ./port stop all"
  echo "  ./port list tunnels"
}

# Trap Ctrl+C and other signals to ensure tunnels are stopped
trap stop_all SIGINT SIGTERM SIGHUP

# Main script logic
mkdir -p /tmp
touch "$DB_FILE"

case "$1" in
  add)
    if [[ -n "$2" ]]; then
      add_tunnel "$2"
    else
      echo "Usage: ./port add <local_port>"
      exit 1
    fi
    ;;
  stop)
    if [[ "$2" == "all" ]]; then
      stop_all
    elif [[ -n "$2" ]]; then
      stop_tunnel "$2"
    else
      echo "Usage: ./port stop <local_port|all>"
      exit 1
    fi
    ;;
  list)
    if [[ "$2" == "tunnels" ]]; then
      list_tunnels
    else
      echo "Usage: ./port list tunnels"
      exit 1
    fi
    ;;
  help)
    print_help
    ;;
  *)
    echo "Error: Unknown command: $1"
    echo "Try: ./port help"
    exit 1
    ;;
esac

exit 0
