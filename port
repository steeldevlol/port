#!/bin/bash

DB_FILE="/tmp/port_tunnels.db"
SERVER="124.6.63.23"
USER="tunnel"

mkdir -p /tmp
touch "$DB_FILE"

add_tunnel() {
  LOCAL_PORT=$1
  TMPFILE=$(mktemp)
  ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -N -R 0:localhost:$LOCAL_PORT $USER@$SERVER >"$TMPFILE" 2>&1 &
  SSH_PID=$!
  sleep 1
  if grep -q "Allocated port" "$TMPFILE"; then
    REMOTE_PORT=$(grep "Allocated port" "$TMPFILE" | grep -oP '\d{4,5}' | head -n1)
    echo "$LOCAL_PORT:$REMOTE_PORT:$SSH_PID" >> "$DB_FILE"
    echo "‚úÖ port $LOCAL_PORT forwarded to $SERVER:$REMOTE_PORT, WWW!!!"
  else
    echo "‚ùå tunnel failed. output:"
    cat "$TMPFILE"
    kill $SSH_PID
  fi
  rm "$TMPFILE"
}

stop_tunnel() {
  PORT=$1
  TMP=$(mktemp)
  while IFS=: read -r LPORT RPORT PID; do
    if [[ "$LPORT" == "$PORT" ]]; then
      kill "$PID" 2>/dev/null
      echo "üõë stopped tunnel for port $LPORT, GONE!!!"
    else
      echo "$LPORT:$RPORT:$PID" >> "$TMP"
    fi
  done < "$DB_FILE"
  mv "$TMP" "$DB_FILE"
}

stop_all() {
  while IFS=: read -r LPORT RPORT PID; do
    kill "$PID" 2>/dev/null
    echo "üõë stopped tunnel for port $LPORT, GONE!!!"
  done < "$DB_FILE"
  > "$DB_FILE"
}

list_tunnels() {
  if [[ ! -s "$DB_FILE" ]]; then
    echo "‚ÑπÔ∏è  no tunnels rn sorry üò≠"
    return
  fi
  echo "üîÅ active tunnels rn:"
  while IFS=: read -r LPORT RPORT PID; do
    if ps -p "$PID" > /dev/null 2>&1; then
      echo " - $SERVER:$RPORT ‚ûú localhost:$LPORT (pid $PID)"
    fi
  done < "$DB_FILE"
}

reset() {
  echo "‚ö†Ô∏è  resetting port will also stop this ssh connection, you will be disconnected, is that ok? (y/n)"
  read -r CONFIRM
  if [[ "$CONFIRM" =~ ^[Yy]$ ]]; then
    > "$DB_FILE"
    pkill -9 ssh 2>/dev/null
    echo "üßº reset done"
  else
    echo "üö´ reset cancelled"
  fi
}

print_help() {
  echo "üß™ port script helper by steeldev heh!!!"
  echo "usage:"
  echo "  port add <port>        add tunnel for local port"
  echo "  port stop <port>       stop 1 tunnel"
  echo "  port stop all          kill all tunnels"
  echo "  port list tunnels      show tunnels that still live"
  echo "  port reset             kill ALL ssh procs + wipe DB"
  echo "  port help              this help screen lol"
}

case "$1" in
  add)
    if [[ -n "$2" ]]; then
      add_tunnel "$2"
    else
      echo "usage: ./port add <local_port>"
    fi
    ;;
  stop)
    if [[ "$2" == "all" ]]; then
      stop_all
    elif [[ -n "$2" ]]; then
      stop_tunnel "$2"
    else
      echo "usage: port stop <local_port|all>"
    fi
    ;;
  list)
    if [[ "$2" == "tunnels" ]]; then
      list_tunnels
    else
      echo "usage: port list tunnels"
    fi
    ;;
  reset)
    reset
    ;;
  help)
    print_help
    ;;
  *)
    echo "‚ùì unknown command: $1"
    echo "try: port help"
    ;;
esac
